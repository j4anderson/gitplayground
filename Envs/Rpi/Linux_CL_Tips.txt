---------------   linux command line tips  -------------------

pwd     -- Print Working Directory:  Shows the name of the current directory
ls	-- shows the objects in a directory
  -alhtr  -- options to show hidden files, sort them, use 
	  -- what the hell are . and ..?

cd	-- Change Directory
mkdir	-- Make Directory
rmdir	-- Remove Directory

echo	-- displays the contents of the argument
cat	-- displays the contents of a file

> filename  	-- take whatever is produced to the left and write to a file
>> filename	-- same but do not overwrite the file (keep appending)

cp	-- copy a file
rm	-- remove a file

-- vi
:set ts=4      -- sets tab size to 4 chars


-- git
  -- Lets config the git env:

	git config --global user.name "j4anderson"
	git config --global user.email "<emailaddress>"
	git config --global --list
	
	--set up new ssh key  (https://help.github.com/articles/generating-ssh-keys/)

	ssh-keygen -t ed25519 -C "<emailaddress>
		pp hint (Cat no CAPS)	

	  -- start ssh-agent
	ps -ef | grep ssh-agent  (and if none, start it):
	eval "$(ssh-agent -s)"

 	  -- then open or create config file:
	vim ~/.ssh/config
	
	Host *
	  AddKeysToAgent yes
	  UseKeychain yes 		-- only if you used a passphrase
	  IdentityFile ~/.shh/id_ed25519	

	  -- Now add it:

	ssh-add -K ~/.ssh/id_ed25519

	  -- then add the contents of that file's .pub copy (public key) to github website (SSH key)


	-- OLD stuff here:	
	ssh-keygen -t rsa -b 4096 -C "<emailaddress>"
	  - if ed25519 isn't available
	
	-- epiphany browser doesn't seem to work with the Add SSH key on github so
	-- use curl with the github api to add it:

	curl -u "j4anderson" \
	    --data "{\"title\":\"RPi`date +%Y%m%d%H%M%S`\",\"key\":\"`cat ~/.ssh/id_rsa.pub`\"}" \
	    https://api.github.com/user/keys
	 -- go out to the website and see the new credential :)

  -- Now clone a repo:
	git clone https://github.com/j4anderson/gitplayground

  -- add folders and file then add them to git
	git status
	git add <new folder name>
	git commit -am "comment on the commit"
	git remote -v
	git push <remote name> <branch name>

  -- now, before doing any work:
	git fetch origin	-- get updates to the local master
	git branch rpi_upd	-- create a branch for edits
	git checkout rpi_upd	-- switch to that branch
	git checkout -b rpi_upd	-- same as the last 2 in one command :)
	-- do edits/add files, etc
	git diff/add/commit etc until done
	git checkout master
	git merge rpi_upd	-- pushes changes to local master
	git push		-- pushes local master changes to github (email address + Drew's boat)
	git branch -d rpi_upd	-- delete the branch once no longer needed


